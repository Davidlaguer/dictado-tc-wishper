T√çTULO DEL CAMBIO: Activaci√≥n de transcripci√≥n en tiempo real  
FECHA: 2025-05-06

DESCRIPCI√ìN DEL CAMBIO:  
Se implementa el sistema de transcripci√≥n en tiempo real usando `Socket.IO` y `Whisper`.  
Los objetivos fueron:
- Conectar el frontend con un backend WebSocket que recibe fragmentos de audio.
- Transcribir los fragmentos en tiempo real y mostrarlos en el cuadro `contenteditable`.
- Asegurar que el audio se divide en chunks correctamente.
- Insertar la transcripci√≥n l√≠nea a l√≠nea en el cuadro `#transcription`.

ARCHIVOS MODIFICADOS / IMPLICADOS:  
- script.js  
- index.html  
- backend Whisper (Python: app con Flask + Socket.IO)

--------------------------------------------------
ARCHIVO: script.js

>> C√ìDIGO ACTUAL (despu√©s del cambio):
// script.js

// === CONFIGURACI√ìN DE WEBSOCKET ===
const socket = io('http://localhost:5050');

// === VARIABLES DEL DOM ===
const micButton = document.getElementById('mic-button');
const transcriptionBox = document.getElementById('transcription');
let isRecording = false;
let mediaRecorder;

// === SOCKET.IO EVENTS ===
socket.on('connect', () => console.log('üîó Socket conectado'));
socket.on('transcription', ({ text }) => {
  console.log('üì§ Fragmento transcrito:', text);
  if (text) {
    transcriptionBox.innerHTML += text + '<br>';
    transcriptionBox.scrollTop = transcriptionBox.scrollHeight;
  }
});

// === CONTROL DEL BOT√ìN DE MICR√ìFONO ===
micButton.addEventListener('click', async () => {
  if (!isRecording) {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder = new MediaRecorder(stream);
      mediaRecorder.start(5000); // env√≠a trozos cada 5 segundos

      mediaRecorder.ondataavailable = e => {
        if (e.data.size > 0) {
          e.data.arrayBuffer().then(buf => {
            socket.emit('audio_chunk', { chunk: new Uint8Array(buf) });
          });
        }
      };

      mediaRecorder.onstart = () => {
        micButton.classList.add('active');
        console.log('üé§ Inicio streaming audio');
        isRecording = true;
      };

      mediaRecorder.onstop = () => {
        micButton.classList.remove('active');
        console.log('üé§ Fin streaming audio');
        isRecording = false;
      };

    } catch (err) {
      alert('Error accediendo al micr√≥fono: ' + err.message);
    }
  } else {
    mediaRecorder.stop();
  }
});

// === DOMContentLoaded: funcionalidades existentes ===
document.addEventListener('DOMContentLoaded', () => {
  // Generar informe
  const generateBtn = document.getElementById('generate-btn');
  const popup = document.getElementById('popup');
  const popupContent = document.getElementById('popup-content');
  const popupClose = document.getElementById('popup-close');

  generateBtn.addEventListener('click', () => {
    const dictado = transcriptionBox.textContent.trim();
    if (!dictado) {
      alert('Dictado vac√≠o.');
      return;
    }
    const informe = generarInforme(dictado);
    mostrarPopup(informe);
    guardarEnHistorial(informe);
  });

  popupClose.addEventListener('click', () => {
    popup.style.display = 'none';
  });

  // Historial
  const historialBtn = document.getElementById('historial-button');
  const historialList = document.getElementById('historial-list');
  historialBtn.addEventListener('click', () => {
    historialList.classList.toggle('show');
  });

  function guardarEnHistorial(texto) {
    const fecha = new Date().toLocaleString();
    const item = document.createElement('li');
    item.textContent = `[${fecha}] ${texto.substring(0, 50)}...`;
    historialList.appendChild(item);
  }

  // Atajos personalizados
  const atajoBtn = document.getElementById('atajo-button');
  const atajoForm = document.getElementById('atajo-form');
  const atajoInput = document.getElementById('atajo-clave');
  const sustitucionInput = document.getElementById('atajo-sustitucion');
  const crearAtajoBtn = document.getElementById('crear-atajo-button');
  const atajosGuardadosList = document.getElementById('atajos-guardados');
  const mostrarAtajosBtn = document.getElementById('mostrar-atajos');

  atajoBtn.addEventListener('click', () => atajoForm.classList.toggle('show'));

  crearAtajoBtn.addEventListener('click', () => {
    const clave = atajoInput.value.trim();
    const valor = sustitucionInput.value.trim();
    if (clave && valor) {
      localStorage.setItem(`atajo_${clave}`, valor);
      atajoInput.value = '';
      sustitucionInput.value = '';
      alert('Atajo guardado');
      mostrarAtajos();
    }
  });

  mostrarAtajosBtn.addEventListener('click', () => atajosGuardadosList.classList.toggle('show'));

  function mostrarAtajos() {
    atajosGuardadosList.innerHTML = '';
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('atajo_')) {
        const valor = localStorage.getItem(key);
        const item = document.createElement('li');
        item.textContent = `${key.replace('atajo_', '')} ‚Üí ${valor}`;
        atajosGuardadosList.appendChild(item);
      }
    });
  }

  mostrarAtajos();
});

// === Funciones auxiliares ===
function generarInforme(texto) {
  let procesado = texto;
  Object.keys(localStorage).forEach(key => {
    if (key.startsWith('atajo_')) {
      const clave = key.replace('atajo_', '');
      const valor = localStorage.getItem(key);
      const regex = new RegExp(`\\b${clave}\\b`, 'gi');
      procesado = procesado.replace(regex, valor);
    }
  });
  return procesado;
}

function mostrarPopup(texto) {
  const popup = document.getElementById('popup');
  const popupContent = document.getElementById('popup-content');
  popupContent.innerHTML = texto.replace(/\n/g, '<br>');
  popup.style.display = 'block';
}

function cerrarPopup() {
  document.getElementById('popup').style.display = 'none';
}

--------------------------------------------------
ARCHIVO: index.html

>> C√ìDIGO ACTUAL (despu√©s del cambio):
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Dictado Informes TC</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>

<!-- Plugin flotante -->
<div id="plugin-container">
    <div id="drag-bar">üü∞ Mover</div>

    <!-- Cuadro de transcripci√≥n -->
    <div id="transcription" class="dictated-text" contenteditable="true"></div>

    <!-- Micr√≥fono centrado con SVG -->
    <div class="center-controls">
        <button id="mic-button" aria-label="Micr√≥fono">
            <svg xmlns="http://www.w3.org/2000/svg" height="28" width="28" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 14a3 3 0 0 0 3-3V5a3 3 0 0 0-6 0v6a3 3 0 0 0 3 3zm5-3a5 5 0 0 1-10 0H5a7 7 0 0 0 14 0h-2zM11 19.93V22h2v-2.07a8.001 8.001 0 0 0 6.93-6.93H18a6 6 0 0 1-12 0H4.07A8.001 8.001 0 0 0 11 19.93z"/>
            </svg>
        </button>
    </div>

    <!-- Bot√≥n principal -->
    <div class="main-action">
        <button id="generate-btn" onclick="mostrarPopup()">Generar informe</button>
    </div>

    <!-- Barra secundaria -->
    <div class="secondary-actions">
        <button id="reset-btn">‚ôªÔ∏è Nuevo dictado</button>

        <div class="dropdown">
            <button id="atajo-button">‚öôÔ∏è Atajos personalizados</button>
            <div id="atajo-form" class="dropdown-content">
                <strong>‚ûï Crear nuevo atajo</strong><br>
                <input type="text" id="atajo-clave" placeholder="Palabra clave">
                <input type="text" id="atajo-sustitucion" placeholder="Texto sustituto">
                <button id="crear-atajo-button">Guardar atajo</button>
                <hr>
                <strong>üìÇ Ver atajos guardados</strong>
                <button id="mostrar-atajos">Mostrar/Ocultar</button>
                <ul id="atajos-guardados"></ul>
            </div>
        </div>

        <div class="dropdown">
            <button id="historial-button">üóÇÔ∏è Historial</button>
            <ul id="historial-list"></ul>
        </div>
    </div>

    <!-- Pop-up informe generado -->
    <div id="popup">
        <h3>INFORME GENERADO</h3>
        <div id="popup-content"></div>
        <button onclick="cerrarPopup()">Copiar</button>
        <button onclick="cerrarPopup()">Exportar PDF</button>
        <button id="popup-close">Cerrar</button>
    </div>
</div>

<!-- Cliente Socket.IO -->
<script src="https://cdn.socket.io/4.5.1/socket.io.min.js"></script>
<!-- Script principal -->
<script src="script.js"></script>
</body>
</html>


--------------------------------------------------
ARCHIVO: backend Whisper Python (opcional)

>> C√ìDIGO ACTUAL (despu√©s del cambio):
import os
import tempfile
import subprocess
from flask import Flask
from flask_cors import CORS
from flask_socketio import SocketIO, emit
import whisper

# Inicializa la aplicaci√≥n Flask y habilita CORS
app = Flask(__name__)
CORS(app)

# Configura SocketIO para WebSockets (usa eventlet por defecto si est√° instalado)
socketio = SocketIO(app, cors_allowed_origins="*")

# Carga el modelo Whisper √∫nicamente al iniciar el servidor
model = whisper.load_model("base")

@socketio.on('audio_chunk')
def handle_audio_chunk(data):
    """
    Recibe trozos de audio del cliente (Uint8Array convertido a bytes)
    y emite la transcripci√≥n parcial de ese fragmento.
    """
    # L√≠nea de depuraci√≥n: muestra en consola que lleg√≥ un chunk\ n    print(f"üì• Chunk recibido ({len(data['chunk'])} bytes)")
    # Convierte la lista de bytes a bytes nativos
    audio_bytes = bytes(data['chunk'])

    # Procesa el trozo en un directorio temporal
    with tempfile.TemporaryDirectory() as tmpdir:
        # Guarda el chunk original
        in_path = os.path.join(tmpdir, 'chunk.webm')
        with open(in_path, 'wb') as f:
            f.write(audio_bytes)

        # Convierte a WAV mono a 16 kHz con ffmpeg
        wav_path = os.path.join(tmpdir, 'chunk.wav')
        subprocess.run(
            [
                "ffmpeg", "-i", in_path,
                "-ar", "16000", "-ac", "1", wav_path
            ],
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )

        # Transcribe el fragmento con Whisper
        result = model.transcribe(wav_path, language="es", fp16=False)
        text = result.get('text', '').strip()

    # Env√≠a el fragmento transcrito de vuelta al cliente
    emit('transcription', {'text': text})

if __name__ == '__main__':
    # Mensaje de arranque para verificar en consola
    print("üî• Iniciando servidor WebSocket con Whisper en el puerto 5050‚Ä¶")
    # Arranca el servidor WebSocket en el puerto 5050
    socketio.run(app, host='0.0.0.0', port=5050)

--------------------------------------------------

RESULTADO:  
‚úÖ Socket conectado correctamente.  
‚úÖ El bot√≥n activa grabaci√≥n y transcribe fragmentos de forma estable.  
‚úÖ Texto insertado en tiempo real dentro del cuadro de entrada `#transcription`.  
‚è≥ Pendiente: revisar comportamiento si se deja pulsado durante varios minutos (test prolongado).  
